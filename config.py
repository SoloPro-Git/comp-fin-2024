BASE_URL = "http://192.168.8.3:8000/v1"
MODEL_NAME = "/data1/hf_model/THUDM/glm-4-9b-chat/"

BASE_URL = "https://open.bigmodel.cn/api/paas/v4/"
MODEL_NAME = "glm-4-air"


SUP_MAX_RETRY_TIMES = 3

SuperVisor_SysPrompt = "你是一个有用的任务分解者,你需要把根据工具可以解决的问题，把问题分解"
SuperVisor_conclude_SysPrompt = "你需要对子问题完成后，对结果进行汇总总结"
Worker_SysPrompt = "你是一个工具使用者,你需要用不同工具去回答用户的问题"
TesterSingle_SysPrompt = "你是一个测试员,需要判断本次搜索的结果是否能回答问题"
TesterMerge_SysPrompt = "你是一个测试员,需要判断本次回答是否能完整有效的回答问题"
EMPYT_SysPrompt = ""









# PROMPT

EMPTY_PROMPT = "{{ query }}"

SuperVisor_template = """<工具描述> {{ tools_desc }} </工具描述>
<主要问题>{{ query }}</主要问题>
<参考形式>[{"子问题":"","推荐工具":""},{"子问题":"","推荐工具":""},{"子问题":"","推荐工具":""}]<参考形式>
<提示>如果你碰到"英文的公司名称",可以分解一个子问题为"把英文公司名称翻译成中文公司名称"</提示>
根据"工具描述",把上述"主要问题"分解为工具可以解决的子问题,根据问题最后要查找的信息,结合使用的工具倒推如何查询最终信息,要清楚哪个问题可以用什么工具,没有推荐就留空字符串,以"参考形式"给出正确的子问题顺序。
你的回答必须是"参考形式"中的 json 格式"""

SuperVisor_conclude_template = """<主要问题>{{ origin_query }}</主要问题>
根据"已知信息"和 tool 的结果,尽可能详尽、准确的回答"主要问题"，把问题到答案查询计算到的关键信息展示出来，关键信息要包含主语。如法院名称、公司名称。
当问题涉及"地方",优先给出地址。
金额数值要适当的转换为万元或亿元，答案要保留主语、关键信息，要包含原问题分解的子答案，要体现子答案中的内容，不允许编造答案"""

SuperVisor_tiny_answer_template = """<原始问题>{{ query }}</原始问题>
<原始答案>{{ ans }}</原始答案>
根据上述内容，从"原始答案"重新整理一个更为精准、简洁、容易理解的答案,可以忽略主语,只给出关键信息"""



SuperVisor_Retry_template = """<工具描述> {{ tools_desc }} </工具描述>
<主要问题>{{ query }}</主要问题>
<历史分解>{{ task_old }}</历史分解>
<历史失败答案>{{ final_answer_old }}</历史失败答案>
<数据提示>这些属于不同数据的可能类型:[{'公司代码':'000001'、'300078'},{'案号':'(2020)浙民申2165号'、'（2019）粤0309民初194号'},{'社会统一信用代码':'91410100170167831Q'}]</数据提示>
<参考形式>[{"子问题":"","推荐工具":""},{"子问题":"","推荐工具":""},{"子问题":"","推荐工具":""}]<参考形式>
曾经的"历史分解"子问题失败了,参考"历史失败答案",把上述"主要问题"中没有明确解决的问题重新分解为子问题,以"参考形式"给出正确的子问题顺序。"""


Worker_judge_template = """Given the user question below, classify it as either being about `Company` or `Law`.
    
Do not respond with more than one word.

<question>
{{ query }}
</question>

Classification:"""

Worker_law_template = """<问题>{{ query }}</问题>"""
# <提示>如果你需要提取案件号,你需要正确提取案件号,案件号的样例格式是["(2020)赣0191民初1045号","(2021)沪0104民初6181号"],"(2019)湘0111民初3091号"}"</提示>

Worker_company_template = """<原问题>{{ origin_query }}</原问题>
<子问题>{{ sub_query }}</子问题>
回答子问题，如果涉及对比成立日期、对比金额、数值计算、数值对比，你需要step by step一步步推理，得到计算结果后再回答问题，
如果子问题可以通过历史 tool 回答，则不需要调用工具。
不允许推断、假设、猜测、编造数据，不允许推断、猜测、编造答案"""
# <提示>如果你需要提取案件号,你需要正确提取案件号,案件号的样例格式是["(2020)赣0191民初1045号","(2021)沪0104民初6181号"],"(2019)湘0111民初3091号"}"</提示>

Worker_company_integration_python_template = """<问题>{{ query }}</问题>
<全量信息>{{ info_dict_process }}</全量信息>
<打印格式>{{ info_dict_print }}</打印格式>
你需要根据"问题",编写 python 代码,"问题"的每一个条件都需要处理。处理"全量信息"中的内容。最后按照"打印格式"打印出结果。你需要操作 data 变量进行后续操作。你只需要给出完整 python 代码。
"""

Worker_company_integration_python_over_template = """<问题>{{ query }}</问题>
<全量信息格式>{{ info_dict_process }}</全量信息格式>
<提示>全资子公司意味着投资比例为 100;如出现"过亿",应该是大于关系,为">"</提示>
<打印格式>{{ info_dict_print }}</打印格式>
你需要根据"问题",编写 python 代码,"问题"的每一个条件都需要处理。处理"全量信息"中的内容。最后按照"打印格式" print 出结果。data 的格式与"打印格式"一致。
"全量信息"的格式参考"全量信息格式"。"全量信息"存储在变量 data 中。"全量信息"已经在 data 变量中定义好了,代码中不需要再重新定义data。你需要操作 data 变量进行后续操作。保留 data 的所有字段。
你只需要给出续写的完整 python 代码。
"""

Worker_rewrite_template = """<工具描述> {{ tools_desc }} </工具描述>
<数据提示>这些属于不同数据的可能类型:[{'公司代码':'000001']},{'案号':['(2020)浙民申2165号'、'（2019）粤0309民初194号']},{'社会统一信用代码':'91410100170167831Q'}]</数据提示>
<原问题>{{ origin_query }}</原问题>
<上级子问题答案>{{ task_compelete_answer }}</上级子问题答案>
<子问题>{{ sub_query }}</子问题>
<参考形式> [{"新子问题":"","推荐工具":""},{"新子问题":"","推荐工具":""},{"新子问题":"","推荐工具":""}] <参考形式>
如果"上级子问题答案"已经可以完整无误回答原问题,且没有筛选、数值计算,则输出"[]",不要输出多余字符,注意"详细地址"的回答需要到区级。但是如果问题涉及筛选、数值计算、金额计算、次数统计，你最好用 python 工具构建"新子问题"进行验算。
如果涉及行业查询，要调用其他工具来确认行业。当问题涉及"地方",优先查询地址。
如果不能,根据"工具描述",要继续查询"未提供"的信息,把上述"子问题"重写、把子问题的主语要进行指代消解、分解为原问题中信息没有直接提供的、尚未解决的"新子问题"。根据"上级子问题答案",没有推荐工具就留空字符串,以"参考形式"给出正确的子问题顺序。
你的回答必须是"参考形式"中的 json 格式"""

Python_Exec_template = """<原问题>{{  origin_query }}</原问题>
<子问题>{{  sub_query }}</子问题>
<提示>"被起诉人"是"被告","起诉人"是"原告",字符串判断尽量用 in 关键字</提示>
```python\ndata = {{  known_info }}```
<指令>"数据"存储在变量 data 中。"数据"已经在 data 变量中定义好了,代码中不需要再重新定义data。你需要操作 data 变量进行后续操作。你需要补全 python 代码，尽可能解决"原问题"或者"子问题"，不要自己造假数据,要给出完整的代码，在代码中最终 print 出一个文本答案即可，不需要 return</指令>"""

TesterM_template = """<问题答案对>{{ final_question_answer }}</问题答案对>
<指令>判断"问题答案对"中答案是否完整回答了问题,如果没有完整回答问题,或者答案表示"很抱歉，没找到相关信息","无法回答","需要进一步查询"等,则判断为"无效",你只能回复 2 个字，"无效"或者"有效"</指令>"""